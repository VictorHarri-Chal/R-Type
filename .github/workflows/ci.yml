name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BINARY: "R-Type"

jobs:

  build-on-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build R-Type on Ubuntu (desktop)
        run: |
          mkdir build
          cd build && cmake ..
          cmake --build .
      - name: Check Ubuntu build (desktop)
        run: test -f r-type

  build-on-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build R-Type on Windows (desktop)
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
      - name: Check Windows build (desktop)
        run: Test-Path r-type

  clean-repo:
    needs:
      - build-on-ubuntu
      - build-on-windows
    runs-on: ubuntu-latest
    env:
      USELESS_FILES_REGEX: (.*\.gc(no|da|ov))$|(.*\.(a|o))$|(.*~)$|^(#.*#)$|^tmp\/.*|.*\/tmp\/.*
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Find useless files recursively
        run: |
          USELESS_FILES=$(find . -type f -printf '%P\n' | { grep -P "${{ env.USELESS_FILES_REGEX }}" || true; })
          if [ "$USELESS_FILES" != "" ]; then
              IFS=$'\n'$'\r'
              for LINE in $USELESS_FILES; do
                  echo "::error file=${LINE},line=1,col=1,title=Useless file detected::${LINE}"
              done
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
          else
              echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          fi
      - name: Check if task failed
        if: env.FAIL_TASK == 'true'
        run: exit 1

  mirror:
    needs:
      - build-on-ubuntu
      - build-on-windows
      - clean-repo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ secrets.REPO_URL }}
          ssh_private_key:
            ${{ secrets.SSH_KEY }}
